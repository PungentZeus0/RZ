%TimerV2.0
#new:Data $MapChangeBool
{
	00000000
}

@Hook EED90 %goto_map hook for knowing LZ entry
{
	ORI t0, r0, 0001
	SAW t0, $MapChangeBool
	LW	RA, 002C (SP)
	J 802CA3E8
	LW	S4, 0028 (SP)
}
#new:Data $MainBool
{
	00000000
}

#new:Function $CheckForMenuDisplayBoolFlip
{
	LAH t0, 80074026
	ORI t1, r0, 0028
	BNE t0, t1, .end
	NOP
	LAH t0, 80074036
	ORI t1, r0, 0008 %c-up
	BNE t0, t1, .end
	NOP
	LAW t0, $MainBool
	XORI t0, t0, 0001
	SAW t0, $MainBool
	.end
	JR RA
	NOP
}

@Hook 82774 %800E92C4
{
	PUSH ra
	JAL $CheckForMenuDisplayBoolFlip
	NOP
	JAL $CheckStart
	NOP
	JAL $CheckEnd
	NOP
	LAW t0, $MainBool
	BEQ t0, r0, .skip1
	NOP
	JAL $DrawTimerBox
	NOP
	.skip1
	JAL $MainTimerFunc
	NOP
	LAW t0, $MainBool
	BEQ t0, r0, .skip2
	NOP
	JAL $MoveCursor
	NOP
	JAL $PrintMenu
	NOP
	.skip2
	JAL $ClearTextColors
	NOP
	JAL $ColorSelectedOption
	NOP
	LAW t0, $MainBool
	BEQ t0, r0, .skip3
	NOP
	JAL $HandleCursorPosition
	NOP
	.skip3
	LAW t0, $MainBool
	BEQ t0, r0, .skip4
	NOP
	JAL $PrintStartAndEndMode
	NOP
	.skip4
	JAL $SaveAndLoadPos
	NOP
	POP ra
	LW	S2, 0070 (SP)
    J 800E92CC
    LW	S1, 006C (SP)
}

#new:Data $SavedPosition
{
	3F800000 3F800000 3F800000 %default position of 1, 1, 1
}

#new:Function $SaveAndLoadPos
{
	LAH t0, 80074026
	ANDI t0, t0, 2000 %Z
	BEQ t0, r0, .exit
	NOP
	LAH t0, 80074036
	ANDI t0, t0, 0008 %c-up
	BEQ t0, r0, .cDownCheck
	NOP
	%Z + c-up pressed
	LIO t0, $SavedPosition
	LIO t1, 8010EFF0
	LW t2, 0000 (t1)
	SW t2, 0000 (t0)
	LW t2, 0004 (t1)
	SW t2, 0004 (t0)
	LW t2, 0008 (t1)
	SW t2, 0008 (t0)
	BEQ r0, r0, .exit
	NOP
	.cDownCheck
	LAH t0, 80074036
	ANDI t0, t0, 0004 %c-down
	BEQ t0, r0, .exit
	NOP
	%Z + c-down are pressed, load position
	LIO t0, $SavedPosition
	LIO t1, 8010EFF0
	LW t2, 0000 (t0)
	SW t2, 0000 (t1)
	LW t2, 0004 (t0)
	SW t2, 0004 (t1)
	LW t2, 0008 (t0)
	SW t2, 0008 (t1)
	.exit
	JR RA
	NOP
}

#new:Function $ResetTimers
{
	PUSH ra
	LIO t0, $64BitCount
	SD r0, 0000 (t0)
	SAW r0, $FrameCountElapsed
	SAW r0, $PreviousCount %?
	SAW r0, $InitFlag
	JPOP ra
	NOP
}

#new:Data $TimerMainState
{
	00000001 
	%0 - running
	%1 - stopped
}

#new:Function $CheckStart
{
	PUSH ra
	LAW t0, $TimerMainState
	BEQ t0, r0, .exitfunc
	NOP
	LAW t0, $TimerStateStart
	BEQ t0, r0, .LZexitState
	NOP
	ORI t1, r0, 0001
	BEQ t0, t1, .Rexit
	NOP
	ORI t1, r0, 0002
	BEQ t0, t1, .Lexit
	NOP
	BEQ r0, r0, .exitfunc
	NOP
	.LZexitState
	LAW t0, $MapChangeBool
	BEQ t0, r0, .exitfunc
	NOP
	SAW r0, $MapChangeBool
	BEQ r0, r0, .exitcheck
	NOP
	.Rexit
	LAH t0, 80074036
	ANDI t0, t0, 0010 %R button
	BEQ t0, r0, .exitfunc
	NOP
	BEQ r0, r0, .exitcheck
	NOP
	.Lexit
	LAH t0, 80074036
	ANDI t0, t0, 0020 %L button
	BEQ t0, r0, .exitfunc
	NOP
	BEQ r0, r0, .exitcheck
	NOP
	.exitcheck
	SAW r0, $TimerMainState
	JAL $ResetTimers
	NOP
	ORI t0, r0, 0001
	SAW t0, $MainTimerBool
	SAW t0, $FrameTimerBool
	.exitfunc
	JPOP ra
}

#new:Function $PrintStartAndEndMode
{
	ADDIU sp, sp, -30
	SW ra, 0020 (sp)
	LAW t0, $TimerStateStart
	SLL t0, t0, 0002 %multiply by 4
	LIO t1, $SecondStringPointers
	ADDU t1, t0, t1
	LW a0, 0000 (t1) %load current string pointer
	ORI a1, r0, 010E
	ORI a2, r0, 0082
	ORI a3, r0, 00FE
	SW r0, 0010 (sp)
	JAL 801264EC
	SW r0, 0014 (sp)

	LAW t0, $TimerStateEnd
	SLL t0, t0, 0002 %multiply by 4
	LIO t1, $SecondStringPointers
	ADDU t1, t0, t1
	LW a0, 0000 (t1) %load current string pointer
	ORI a1, r0, 0102
	ORI a2, r0, 0092
	ORI a3, r0, 00FE
	SW r0, 0010 (sp)
	JAL 801264EC
	SW r0, 0014 (sp)
	LW ra, 0020 (sp)
	JR RA
	ADDIU sp, sp, 30
}

#new:Function $CheckEnd
{
	PUSH ra
	LAW t0, $TimerMainState
	BNE t0, r0, .exitfunc
	NOP
	LAW t0, $TimerStateEnd
	BEQ t0, r0, .LZexitState
	NOP
	ORI t1, r0, 0001
	BEQ t0, t1, .Rexit
	NOP
	ORI t1, r0, 0002
	BEQ t0, t1, .Lexit
	NOP
	BEQ r0, r0, .exitfunc
	NOP
	.LZexitState
	LAW t0, $MapChangeBool
	BEQ t0, r0, .exitfunc
	NOP
	SAW r0, $MapChangeBool
	BEQ r0, r0, .exitcheck
	NOP
	.Rexit
	LAH t0, 80074036
	ANDI t0, t0, 0010 %R button
	BEQ t0, r0, .exitfunc
	NOP
	BEQ r0, r0, .exitcheck
	NOP
	.Lexit
	LAH t0, 80074036
	ANDI t0, t0, 0020 %L button
	BEQ t0, r0, .exitfunc
	NOP
	BEQ r0, r0, .exitcheck
	NOP
	.exitcheck
	ORI t0, r0, 0001
	SAW t0, $TimerMainState
	SAW r0, $MainTimerBool
	SAW r0, $FrameTimerBool
	.exitfunc
	JPOP ra
}


#new:Data $TimerStateStart
{
	00000000
}

#new:Data $TimerStateEnd
{
	00000000
}

#new:Function $MainTimerFunc
{
	PUSH ra
	JAL $CheckForSetGraphicBool
	NOP
	%JAL $CheckStart
	%NOP
	LAW t0, $MainTimerBool
	BEQ t0, r0, .skipTimerUpdate
	NOP
	JAL $MainTimer
	NOP
	.skipTimerUpdate
	LAW t0, $TimerPrintBool
	BEQ t0, r0, .skipTimer
	NOP
	JAL $PrintTimer
	NOP
	.skipTimer
	LAW t0, $FrameTimerBool
	BEQ t0, r0, .skipFrameTimerUpdate
	NOP
	JAL $IncrementFrameTimer
	NOP
	.skipFrameTimerUpdate
	LAW t0, $FrameTimerBoolGraphic
	BEQ t0, r0, .skipFrameTimer
	NOP
	JAL $DisplayFrameTimer
	NOP
	.skipFrameTimer
	SAW r0, $MapChangeBool
	JPOP ra
}
/%

	JAL $CheckForSetGraphicBool
	NOP
	%JAL $CheckAndActOnTimerState
	%NOP
	LAW t0, $MainTimerBool
	BEQ t0, r0, .skipTimerUpdate
	NOP
	JAL $MainTimer
	NOP
	.skipTimerUpdate
	LAW t0, $TimerPrintBool
	BEQ t0, r0, .skipTimer
	NOP
	JAL $PrintTimer
	NOP
	.skipTimer
	LAW t0, $FrameTimerBool
	BEQ t0, r0, .skipFrameTimerUpdate
	NOP
	JAL $IncrementFrameTimer
	NOP
	.skipFrameTimerUpdate
	LAW t0, $FrameTimerBoolGraphic
	BEQ t0, r0, .skipFrameTimer
	NOP
	JAL $DisplayFrameTimer
	NOP
	.skipFrameTimer
	SAW r0, $MapChangeBool

	%/

#new:Function $MainTimer
{
	PUSH ra
	JAL $TrackOSCountTotal
	NOP
	JAL $CyclesToMilliseconds
	NOP
	LIO t0, $MillisecondsElapsedTime
	SD v0, 0000 (t0)
	JAL $ConvertMillisecondsToTimer
	NOP
	JAL $CombineTimerValues
	NOP
	LIO a0, $WhereToPlaceAscii
	LIO a1, $TimerFinalString
	JAL $ConvertAsciiToString
	NOP
	%%%%%
	JPOP ra
}

#new:Function $CheckForSetGraphicBool
{
	LAHU t0, 80074026
	ORI t1, r0, C030
	BEQ t0, t1, .check2
	NOP
	JR RA
	NOP
	.check2
	LAHU t0, 80074036
	ORI t1, r0, 4000
	BEQ t0, t1, .flipgraphicbool
	NOP
	JR RA
	NOP
	.flipgraphicbool
	LAW t0, $TimerPrintBool
	XORI t0, t0, 0001 %flip bool
	SAW t0, $TimerPrintBool
	SAW t0, $FrameTimerBoolGraphic
	JR RA
	NOP
}

#new:Function $IncrementFrameTimer
{
	LAW t0, $FrameTimerBool
	BEQ t0, r0, .skipUpdate
	NOP
	LAW t0, $FrameCountElapsed
	ADDIU t0, t0, 0001
	SAW t0, $FrameCountElapsed
	.skipUpdate
	JR RA
	NOP
}

#new:Function $DisplayFrameTimer
{
	ADDIU sp, sp, -30
	SW ra, 0020 (sp)
	LAW t0, $FrameTimerBoolGraphic
	BEQ t0, r0, .skip
	NOP
	LIO a0, $FrameTimerAscii
	LIO a1, $FrameTimerFormatters
	LAW a2, $FrameCountElapsed
	JAL ~Func:sprintf
	DADDU a3, r0, r0
	LIO a0, $FrameTimerAscii
	LIO a1, $FrameTimerString
	JAL $ConvertAsciiToString
	NOP
	LIO a0, $FrameTimerString
	ORI a1, r0, 00E8
	ORI a2, r0, 00C0
	ORI a3, r0, 00FF
	SW r0, 0010 (sp)
	JAL 801264EC
	SW r0, 0014 (sp)
	.skip
	LW ra, 0020 (sp)
	JR RA
	ADDIU sp, sp, 30
}

#new:Function $DrawTimerBox
{
% A0 = posX
% A1 = posY
% A2 = sizeX
% A3 = sizeY
% T0 = style
% T1 = opacity
PUSH ra
ORI a0, r0, 00E4
ORI a1, r0, 007D
ORI a2, r0, 0050
ORI a3, r0, 005F
ORI t0, r0, 0004
JAL $DrawMenuBox
ORI t1, r0, 00C0
JPOP ra
}

#new:Function $TrackOSCountTotal
{
PUSH s0, ra
LAW t0, $InitFlag
BEQ t0, r0, .InitIs0
NOP
LAW s0, $PreviousCount %load previous count to s0
JAL ~Func:osGetCount
NOP
LIO t0, $PreviousCount
SW v0, 0000 (t0) %store new count, old count still in s0
SUBU s0, v0, s0
LIO v0, $64BitCount
LW v1, 0004 (v0)
LW v0, 0000 (v0)
ADDU a1, s0, r0
ADDU a0, r0, r0
ADDU v1, v1, a1
SLTU a2, v1, a1
ADDU v0, v0, a0
ADDU v0, v0, a2
LIO t0, $64BitCount
SW v0, 0000 (t0)
POP s0, ra
JR RA
SW v1, 0004 (t0)
.InitIs0
JAL ~Func:osGetCount
NOP
SAW v0, $PreviousCount
ORI v0, r0, 0001
SAW v0, $InitFlag
POP s0, ra
JR RA
NOP
}

#new:Function $CyclesToMinutes
{
PUSH s0, ra
LIO s0, $64BitCount
LD t0, 0000 (s0)
ORI t1, r0, 003C %60
DDIVU t0, t1
MFLO t0
DADDU t1, r0, r0 %init this to 0
LIO t1, 02CB4178 %46,875,000hz
DDIVU t0, t1
MFLO v0
POP s0, ra
JR RA
NOP
}

#new:Function $CyclesToSeconds
{
PUSH s0, ra
LIO s0, $64BitCount
LD t0, 0000 (s0)
DADDU t1, r0, r0 %init this to 0
LIO t1, 02CB4178 %46,875,000hz
DDIVU t0, t1
MFLO v0
POP s0, ra
JR RA
NOP
}

#new:Function $CyclesToTenths
{
PUSH s0, ra
LIO s0, $64BitCount
LD t0, 0000 (s0)
DADDU t1, r0, r0 %init this to 0
ORI t1, r0, 000A %10
DMULTU t0, t1 %count_total * 10
MFLO t0
LIO t1, 02CB4178 %46,875,000hz
DDIVU t0, t1
MFLO v0
POP s0, ra
JR RA
NOP
}

#new:Function $CyclesToMilliseconds
{
PUSH s0, ra
LIO s0, $64BitCount
LD t0, 0000 (s0)
DADDU t1, r0, r0 %init this to 0
ORI t1, r0, 03E8 %1000
DMULTU t0, t1 %count_total * 100
MFLO t0
LIO t1, 02CB4178 %46,875,000hz
DDIVU t0, t1
MFLO v0
POP s0, ra
JR RA
NOP
}

#new:Function $ConvertMillisecondsToTimer
{
PUSH s0, s1, s2, ra
	LIO s0, $MillisecondsElapsedTime
	LD s0, 0000 (s0)
	BEQ s0, r0, .exit
	NOP
	DADDU s1, r0, r0
	ORI s1, r0, EA60 %60000
	DDIVU s0, s1
	MFLO t0
	BEQ t0, r0, .noMinutes
	NOP
	LIO t2, $Minutes
	SD t0, 0000 (t2)
	.afterMinutes
	ORI s1, r0, 03E8
	DDIVU s0, s1
	MFLO t0
	ADDU s2, t0, r0 %milliseconds as seconds
	BEQ t0, r0, .noSeconds
	NOP
	LIO t1, $Minutes
	LD t1, 0000 (t1)
	BEQ t1, r0, .is0Min
	NOP
	ORI t3, r0, 003C
	MULTU t1, t3
	MFLO t0
	SUBU t0, s2, t0
	.is0Min
	LIO t2, $Seconds
	SD t0, 0000 (t2)
	.afterSeconds
	LIO t2, $Minutes
	LD t0, 0000 (t2)
	BEQ t0, r0, .skiptoSeconds
	NOP
	DADDU t1, r0, r0 %clear t1
	ORI t1, r0, EA60
	MULTU t0, t1 %minutes * 60,000 = milliseconds
	MFLO t0 %total minutes in milliseconds
	.skiptoSeconds
	LIO t2, $Seconds
	LD t1, 0000 (t2)
	BEQ t1, r0, .skiptoMilliseconds
	NOP
	ORI t2, r0, 03E8 %seconds * 1,000 = milliseconds
	MULTU t2, t1
	MFLO t1
	.skiptoMilliseconds
	DADDU t0, t1, t0 %store total milliseconds to subtract in t0
	LIO t2, $MillisecondsElapsedTime
	LD t2, 0000 (t2)
	DSUBU v0, t2, t0
	LIO t2, $Milliseconds
	SD v0, 0000 (t2)
	.exit
POP s0, s1, s2, ra
JR RA
NOP
	.noMinutes
	LIO t2, $Minutes
	BEQ r0, r0, .afterMinutes
	SD r0, 0000 (t2)
	.noSeconds
	LIO t2, $Seconds
	BEQ r0, r0, .afterSeconds
	SD r0, 0000 (t2)
	%divide by 10 to get tenths
	%divide by 100 to get 
}

#new:Function $CombineTimerValues
{
ADDIU sp, sp, -40
SW ra, 0020 (sp)
SW s0, 0024 (sp)
	LIO s0, $Minutes
	LIO a0, $WhereToPlaceAscii
	LIO a1, $Formatters
	LW a2, 0004 (s0)
	LIO s0, $Seconds
	LW a3, 0004 (s0)
	LIO s0, $Milliseconds
	LW t0, 0004 (s0)
	SW t0, 0010 (sp)
	JAL ~Func:sprintf
	SD r0, 0018 (sp)
LW ra, 0020 (sp)
LW s0, 0024 (sp)
JR RA
ADDIU sp, sp, 40
}

#new:Function $ConvertAsciiToString
{
	PUSH s0
	ORI s0, r0, 0020 %value of a space
	.loop
	LB t0, 0000 (a0)
	BEQ t0, r0, .exit
	NOP
	BEQ t0, s0, .isspace
	NOP
	ADDIU t0, t0, FFE0
	SB t0, 0004 (a1)
	.afterstore
	ADDIU a0, a0, 0001
	ADDIU a1, a1, 0001
	BEQ r0, r0, .loop
	NOP
	.isspace
	ORI t0, r0, 0010
	BEQ r0, r0, .afterstore
	SB t0, 0004 (a1)
	.exit
	ORI t0, r0, 00FD
	SB t0, 0004 (a1)
	POP s0
	JR RA
	NOP
}

#new:Function $PrintTimer
{
	ADDIU sp, sp, -30
	SW ra, 0020 (sp)
	LIO a0, $TimerFinalString
	ORI a1, r0, 00E8 %x axis
	ORI a2, r0, 00D0 %y axis
	ORI a3, r0, 00FF %opacity
	SW r0, 0010 (sp)
	JAL 801264EC
	SW r0, 0014 (sp)
	LW ra, 0020 (sp)
	JR RA
	ADDIU sp, sp, 30
}

#new:Function $CheckTimerStart
{
	JR RA
	NOP
}

#export $TimerStateStart
#export $TimerStateEnd
#export $ResetTimers
#export $TimerMainState